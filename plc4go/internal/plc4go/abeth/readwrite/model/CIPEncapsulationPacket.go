//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

package model

import (
	"encoding/xml"
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
	"io"
	"reflect"
	"strings"
)

// Code generated by build-utils. DO NOT EDIT.

// The data-structure of this message
type CIPEncapsulationPacket struct {
	SessionHandle uint32
	Status        uint32
	SenderContext []uint8
	Options       uint32
	Child         ICIPEncapsulationPacketChild
}

// The corresponding interface
type ICIPEncapsulationPacket interface {
	CommandType() uint16
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(io utils.WriteBuffer) error
	xml.Marshaler
	xml.Unmarshaler
}

type ICIPEncapsulationPacketParent interface {
	SerializeParent(io utils.WriteBuffer, child ICIPEncapsulationPacket, serializeChildFunction func() error) error
	GetTypeName() string
}

type ICIPEncapsulationPacketChild interface {
	Serialize(io utils.WriteBuffer) error
	InitializeParent(parent *CIPEncapsulationPacket, sessionHandle uint32, status uint32, senderContext []uint8, options uint32)
	GetTypeName() string
	ICIPEncapsulationPacket
	utils.AsciiBoxer
}

func NewCIPEncapsulationPacket(sessionHandle uint32, status uint32, senderContext []uint8, options uint32) *CIPEncapsulationPacket {
	return &CIPEncapsulationPacket{SessionHandle: sessionHandle, Status: status, SenderContext: senderContext, Options: options}
}

func CastCIPEncapsulationPacket(structType interface{}) *CIPEncapsulationPacket {
	castFunc := func(typ interface{}) *CIPEncapsulationPacket {
		if casted, ok := typ.(CIPEncapsulationPacket); ok {
			return &casted
		}
		if casted, ok := typ.(*CIPEncapsulationPacket); ok {
			return casted
		}
		return nil
	}
	return castFunc(structType)
}

func (m *CIPEncapsulationPacket) GetTypeName() string {
	return "CIPEncapsulationPacket"
}

func (m *CIPEncapsulationPacket) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *CIPEncapsulationPacket) LengthInBitsConditional(lastItem bool) uint16 {
	return m.Child.LengthInBits()
}

func (m *CIPEncapsulationPacket) ParentLengthInBits() uint16 {
	lengthInBits := uint16(0)
	// Discriminator Field (commandType)
	lengthInBits += 16

	// Implicit Field (len)
	lengthInBits += 16

	// Simple field (sessionHandle)
	lengthInBits += 32

	// Simple field (status)
	lengthInBits += 32

	// Array field
	if len(m.SenderContext) > 0 {
		lengthInBits += 8 * uint16(len(m.SenderContext))
	}

	// Simple field (options)
	lengthInBits += 32

	// Reserved Field (reserved)
	lengthInBits += 32

	return lengthInBits
}

func (m *CIPEncapsulationPacket) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func CIPEncapsulationPacketParse(io utils.ReadBuffer) (*CIPEncapsulationPacket, error) {
	if pullErr := io.PullContext("CIPEncapsulationPacket"); pullErr != nil {
		return nil, pullErr
	}

	// Discriminator Field (commandType) (Used as input to a switch field)
	commandType, _commandTypeErr := io.ReadUint16("commandType", 16)
	if _commandTypeErr != nil {
		return nil, errors.Wrap(_commandTypeErr, "Error parsing 'commandType' field")
	}

	// Implicit Field (len) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
	len, _lenErr := io.ReadUint16("len", 16)
	_ = len
	if _lenErr != nil {
		return nil, errors.Wrap(_lenErr, "Error parsing 'len' field")
	}

	// Simple Field (sessionHandle)
	sessionHandle, _sessionHandleErr := io.ReadUint32("sessionHandle", 32)
	if _sessionHandleErr != nil {
		return nil, errors.Wrap(_sessionHandleErr, "Error parsing 'sessionHandle' field")
	}

	// Simple Field (status)
	status, _statusErr := io.ReadUint32("status", 32)
	if _statusErr != nil {
		return nil, errors.Wrap(_statusErr, "Error parsing 'status' field")
	}

	// Array field (senderContext)
	if pullErr := io.PullContext("senderContext", utils.WithRenderAsList(true)); pullErr != nil {
		return nil, pullErr
	}
	// Count array
	senderContext := make([]uint8, uint16(8))
	for curItem := uint16(0); curItem < uint16(uint16(8)); curItem++ {
		_item, _err := io.ReadUint8("", 8)
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing 'senderContext' field")
		}
		senderContext[curItem] = _item
	}
	if closeErr := io.CloseContext("senderContext", utils.WithRenderAsList(true)); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (options)
	options, _optionsErr := io.ReadUint32("options", 32)
	if _optionsErr != nil {
		return nil, errors.Wrap(_optionsErr, "Error parsing 'options' field")
	}

	// Reserved Field (Compartmentalized so the "reserved" variable can't leak)
	{
		reserved, _err := io.ReadUint32("reserved", 32)
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing 'reserved' field")
		}
		if reserved != uint32(0x00000000) {
			log.Info().Fields(map[string]interface{}{
				"expected value": uint32(0x00000000),
				"got value":      reserved,
			}).Msg("Got unexpected response.")
		}
	}

	// Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
	var _parent *CIPEncapsulationPacket
	var typeSwitchError error
	switch {
	case commandType == 0x0101: // CIPEncapsulationConnectionRequest
		_parent, typeSwitchError = CIPEncapsulationConnectionRequestParse(io)
	case commandType == 0x0201: // CIPEncapsulationConnectionResponse
		_parent, typeSwitchError = CIPEncapsulationConnectionResponseParse(io)
	case commandType == 0x0107: // CIPEncapsulationReadRequest
		_parent, typeSwitchError = CIPEncapsulationReadRequestParse(io)
	case commandType == 0x0207: // CIPEncapsulationReadResponse
		_parent, typeSwitchError = CIPEncapsulationReadResponseParse(io, len)
	default:
		// TODO: return actual type
		typeSwitchError = errors.New("Unmapped type")
	}
	if typeSwitchError != nil {
		return nil, errors.Wrap(typeSwitchError, "Error parsing sub-type for type-switch.")
	}

	if closeErr := io.CloseContext("CIPEncapsulationPacket"); closeErr != nil {
		return nil, closeErr
	}

	// Finish initializing
	_parent.Child.InitializeParent(_parent, sessionHandle, status, senderContext, options)
	return _parent, nil
}

func (m *CIPEncapsulationPacket) Serialize(io utils.WriteBuffer) error {
	return m.Child.Serialize(io)
}

func (m *CIPEncapsulationPacket) SerializeParent(io utils.WriteBuffer, child ICIPEncapsulationPacket, serializeChildFunction func() error) error {
	if pushErr := io.PushContext("CIPEncapsulationPacket"); pushErr != nil {
		return pushErr
	}

	// Discriminator Field (commandType) (Used as input to a switch field)
	commandType := uint16(child.CommandType())
	_commandTypeErr := io.WriteUint16("commandType", 16, (commandType))

	if _commandTypeErr != nil {
		return errors.Wrap(_commandTypeErr, "Error serializing 'commandType' field")
	}

	// Implicit Field (len) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
	len := uint16(uint16(uint16(m.LengthInBytes())) - uint16(uint16(28)))
	_lenErr := io.WriteUint16("len", 16, (len))
	if _lenErr != nil {
		return errors.Wrap(_lenErr, "Error serializing 'len' field")
	}

	// Simple Field (sessionHandle)
	sessionHandle := uint32(m.SessionHandle)
	_sessionHandleErr := io.WriteUint32("sessionHandle", 32, (sessionHandle))
	if _sessionHandleErr != nil {
		return errors.Wrap(_sessionHandleErr, "Error serializing 'sessionHandle' field")
	}

	// Simple Field (status)
	status := uint32(m.Status)
	_statusErr := io.WriteUint32("status", 32, (status))
	if _statusErr != nil {
		return errors.Wrap(_statusErr, "Error serializing 'status' field")
	}

	// Array Field (senderContext)
	if m.SenderContext != nil {
		if pushErr := io.PushContext("senderContext", utils.WithRenderAsList(true)); pushErr != nil {
			return pushErr
		}
		for _, _element := range m.SenderContext {
			_elementErr := io.WriteUint8("", 8, _element)
			if _elementErr != nil {
				return errors.Wrap(_elementErr, "Error serializing 'senderContext' field")
			}
		}
		if popErr := io.PopContext("senderContext", utils.WithRenderAsList(true)); popErr != nil {
			return popErr
		}
	}

	// Simple Field (options)
	options := uint32(m.Options)
	_optionsErr := io.WriteUint32("options", 32, (options))
	if _optionsErr != nil {
		return errors.Wrap(_optionsErr, "Error serializing 'options' field")
	}

	// Reserved Field (reserved)
	{
		_err := io.WriteUint32("reserved", 32, uint32(0x00000000))
		if _err != nil {
			return errors.Wrap(_err, "Error serializing 'reserved' field")
		}
	}

	// Switch field (Depending on the discriminator values, passes the serialization to a sub-type)
	_typeSwitchErr := serializeChildFunction()
	if _typeSwitchErr != nil {
		return errors.Wrap(_typeSwitchErr, "Error serializing sub-type field")
	}

	if popErr := io.PopContext("CIPEncapsulationPacket"); popErr != nil {
		return popErr
	}
	return nil
}

// Deprecated: the utils.ReadBufferWriteBased should be used instead
func (m *CIPEncapsulationPacket) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var token xml.Token
	var err error
	foundContent := false
	if start.Attr != nil && len(start.Attr) > 0 {
		switch start.Attr[0].Value {
		// CIPEncapsulationConnectionRequest needs special treatment as it has no fields
		case "org.apache.plc4x.java.ab-eth.readwrite.CIPEncapsulationConnectionRequest":
			if m.Child == nil {
				m.Child = &CIPEncapsulationConnectionRequest{
					Parent: m,
				}
			}
		// CIPEncapsulationConnectionResponse needs special treatment as it has no fields
		case "org.apache.plc4x.java.ab-eth.readwrite.CIPEncapsulationConnectionResponse":
			if m.Child == nil {
				m.Child = &CIPEncapsulationConnectionResponse{
					Parent: m,
				}
			}
		}
	}
	for {
		token, err = d.Token()
		if err != nil {
			if err == io.EOF && foundContent {
				return nil
			}
			return err
		}
		switch token.(type) {
		case xml.StartElement:
			foundContent = true
			tok := token.(xml.StartElement)
			switch tok.Name.Local {
			case "sessionHandle":
				var data uint32
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.SessionHandle = data
			case "status":
				var data uint32
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.Status = data
			case "senderContext":
				var data []uint8
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.SenderContext = data
			case "options":
				var data uint32
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.Options = data
			default:
				attr := start.Attr
				if attr == nil || len(attr) <= 0 {
					// TODO: workaround for bug with nested lists
					attr = tok.Attr
				}
				if attr == nil || len(attr) <= 0 {
					panic("Couldn't determine class type for childs of CIPEncapsulationPacket")
				}
				switch attr[0].Value {
				case "org.apache.plc4x.java.ab-eth.readwrite.CIPEncapsulationConnectionRequest":
					var dt *CIPEncapsulationConnectionRequest
					if m.Child != nil {
						dt = m.Child.(*CIPEncapsulationConnectionRequest)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.ab-eth.readwrite.CIPEncapsulationConnectionResponse":
					var dt *CIPEncapsulationConnectionResponse
					if m.Child != nil {
						dt = m.Child.(*CIPEncapsulationConnectionResponse)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.ab-eth.readwrite.CIPEncapsulationReadRequest":
					var dt *CIPEncapsulationReadRequest
					if m.Child != nil {
						dt = m.Child.(*CIPEncapsulationReadRequest)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.ab-eth.readwrite.CIPEncapsulationReadResponse":
					var dt *CIPEncapsulationReadResponse
					if m.Child != nil {
						dt = m.Child.(*CIPEncapsulationReadResponse)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				}
			}
		}
	}
}

// Deprecated: the utils.WriteBufferReadBased should be used instead
func (m *CIPEncapsulationPacket) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	className := reflect.TypeOf(m.Child).String()
	className = "org.apache.plc4x.java.ab-eth.readwrite." + className[strings.LastIndex(className, ".")+1:]
	if err := e.EncodeToken(xml.StartElement{Name: start.Name, Attr: []xml.Attr{
		{Name: xml.Name{Local: "className"}, Value: className},
	}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.SessionHandle, xml.StartElement{Name: xml.Name{Local: "sessionHandle"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.Status, xml.StartElement{Name: xml.Name{Local: "status"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.SenderContext, xml.StartElement{Name: xml.Name{Local: "senderContext"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.Options, xml.StartElement{Name: xml.Name{Local: "options"}}); err != nil {
		return err
	}
	marshaller, ok := m.Child.(xml.Marshaler)
	if !ok {
		return errors.Errorf("child is not castable to Marshaler. Actual type %T", m.Child)
	}
	if err := marshaller.MarshalXML(e, start); err != nil {
		return err
	}
	if err := e.EncodeToken(xml.EndElement{Name: start.Name}); err != nil {
		return err
	}
	return nil
}

func (m CIPEncapsulationPacket) String() string {
	return string(m.Box("", 120))
}

// Deprecated: the utils.WriteBufferBoxBased should be used instead
func (m *CIPEncapsulationPacket) Box(name string, width int) utils.AsciiBox {
	return m.Child.Box(name, width)
}

// Deprecated: the utils.WriteBufferBoxBased should be used instead
func (m *CIPEncapsulationPacket) BoxParent(name string, width int, childBoxer func() []utils.AsciiBox) utils.AsciiBox {
	boxName := "CIPEncapsulationPacket"
	if name != "" {
		boxName += "/" + name
	}
	boxes := make([]utils.AsciiBox, 0)
	// Discriminator Field (commandType) (Used as input to a switch field)
	commandType := uint16(m.Child.CommandType())
	// uint16 can be boxed as anything with the least amount of space
	boxes = append(boxes, utils.BoxAnything("CommandType", commandType, -1))
	// Implicit Field (len)
	len := uint16(uint16(uint16(m.LengthInBytes())) - uint16(uint16(28)))
	// uint16 can be boxed as anything with the least amount of space
	boxes = append(boxes, utils.BoxAnything("Len", len, -1))
	// Simple field (case simple)
	// uint32 can be boxed as anything with the least amount of space
	boxes = append(boxes, utils.BoxAnything("SessionHandle", m.SessionHandle, -1))
	// Simple field (case simple)
	// uint32 can be boxed as anything with the least amount of space
	boxes = append(boxes, utils.BoxAnything("Status", m.Status, -1))
	// Array Field (senderContext)
	if m.SenderContext != nil {
		// Simple array base type uint8 will be hex dumped
		boxes = append(boxes, utils.BoxedDumpAnything("SenderContext", m.SenderContext))
		// Simple array base type uint8 will be rendered one by one
		arrayBoxes := make([]utils.AsciiBox, 0)
		for _, _element := range m.SenderContext {
			arrayBoxes = append(arrayBoxes, utils.BoxAnything("", _element, width-2))
		}
		boxes = append(boxes, utils.BoxBox("SenderContext", utils.AlignBoxes(arrayBoxes, width-4), 0))
	}
	// Simple field (case simple)
	// uint32 can be boxed as anything with the least amount of space
	boxes = append(boxes, utils.BoxAnything("Options", m.Options, -1))
	// Reserved Field (reserved)
	// reserved field can be boxed as anything with the least amount of space
	boxes = append(boxes, utils.BoxAnything("reserved", uint32(0x00000000), -1))
	// Switch field (Depending on the discriminator values, passes the boxing to a sub-type)
	boxes = append(boxes, childBoxer()...)
	return utils.BoxBox(boxName, utils.AlignBoxes(boxes, width-2), 0)
}
