//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

package model

import (
	"encoding/xml"
	"fmt"
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"io"
)

// Code generated by build-utils. DO NOT EDIT.

// Constant values.
const DF1SymbolMessageFrame_MESSAGEEND uint8 = 0x10
const DF1SymbolMessageFrame_ENDTRANSACTION uint8 = 0x03

// The data-structure of this message
type DF1SymbolMessageFrame struct {
	DestinationAddress uint8
	SourceAddress      uint8
	Command            *DF1Command
	Parent             *DF1Symbol
}

// The corresponding interface
type IDF1SymbolMessageFrame interface {
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(io utils.WriteBuffer) error
	xml.Marshaler
	xml.Unmarshaler
}

///////////////////////////////////////////////////////////
// Accessors for discriminator values.
///////////////////////////////////////////////////////////
func (m *DF1SymbolMessageFrame) SymbolType() uint8 {
	return 0x02
}

func (m *DF1SymbolMessageFrame) InitializeParent(parent *DF1Symbol) {
}

func NewDF1SymbolMessageFrame(destinationAddress uint8, sourceAddress uint8, command *DF1Command) *DF1Symbol {
	child := &DF1SymbolMessageFrame{
		DestinationAddress: destinationAddress,
		SourceAddress:      sourceAddress,
		Command:            command,
		Parent:             NewDF1Symbol(),
	}
	child.Parent.Child = child
	return child.Parent
}

func CastDF1SymbolMessageFrame(structType interface{}) *DF1SymbolMessageFrame {
	castFunc := func(typ interface{}) *DF1SymbolMessageFrame {
		if casted, ok := typ.(DF1SymbolMessageFrame); ok {
			return &casted
		}
		if casted, ok := typ.(*DF1SymbolMessageFrame); ok {
			return casted
		}
		if casted, ok := typ.(DF1Symbol); ok {
			return CastDF1SymbolMessageFrame(casted.Child)
		}
		if casted, ok := typ.(*DF1Symbol); ok {
			return CastDF1SymbolMessageFrame(casted.Child)
		}
		return nil
	}
	return castFunc(structType)
}

func (m *DF1SymbolMessageFrame) GetTypeName() string {
	return "DF1SymbolMessageFrame"
}

func (m *DF1SymbolMessageFrame) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *DF1SymbolMessageFrame) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.Parent.ParentLengthInBits())

	// Simple field (destinationAddress)
	lengthInBits += 8

	// Simple field (sourceAddress)
	lengthInBits += 8

	// Simple field (command)
	lengthInBits += m.Command.LengthInBits()

	// Const Field (messageEnd)
	lengthInBits += 8

	// Const Field (endTransaction)
	lengthInBits += 8

	// Checksum Field (checksum)
	lengthInBits += 16

	return lengthInBits
}

func (m *DF1SymbolMessageFrame) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func DF1SymbolMessageFrameParse(io utils.ReadBuffer) (*DF1Symbol, error) {
	if pullErr := io.PullContext("DF1SymbolMessageFrame"); pullErr != nil {
		return nil, pullErr
	}

	// Simple Field (destinationAddress)
	destinationAddress, _destinationAddressErr := io.ReadUint8("destinationAddress", 8)
	if _destinationAddressErr != nil {
		return nil, errors.Wrap(_destinationAddressErr, "Error parsing 'destinationAddress' field")
	}

	// Simple Field (sourceAddress)
	sourceAddress, _sourceAddressErr := io.ReadUint8("sourceAddress", 8)
	if _sourceAddressErr != nil {
		return nil, errors.Wrap(_sourceAddressErr, "Error parsing 'sourceAddress' field")
	}

	if pullErr := io.PullContext("command"); pullErr != nil {
		return nil, pullErr
	}

	// Simple Field (command)
	command, _commandErr := DF1CommandParse(io)
	if _commandErr != nil {
		return nil, errors.Wrap(_commandErr, "Error parsing 'command' field")
	}
	if closeErr := io.CloseContext("command"); closeErr != nil {
		return nil, closeErr
	}

	// Const Field (messageEnd)
	messageEnd, _messageEndErr := io.ReadUint8("messageEnd", 8)
	if _messageEndErr != nil {
		return nil, errors.Wrap(_messageEndErr, "Error parsing 'messageEnd' field")
	}
	if messageEnd != DF1SymbolMessageFrame_MESSAGEEND {
		return nil, errors.New("Expected constant value " + fmt.Sprintf("%d", DF1SymbolMessageFrame_MESSAGEEND) + " but got " + fmt.Sprintf("%d", messageEnd))
	}

	// Const Field (endTransaction)
	endTransaction, _endTransactionErr := io.ReadUint8("endTransaction", 8)
	if _endTransactionErr != nil {
		return nil, errors.Wrap(_endTransactionErr, "Error parsing 'endTransaction' field")
	}
	if endTransaction != DF1SymbolMessageFrame_ENDTRANSACTION {
		return nil, errors.New("Expected constant value " + fmt.Sprintf("%d", DF1SymbolMessageFrame_ENDTRANSACTION) + " but got " + fmt.Sprintf("%d", endTransaction))
	}

	// Checksum Field (checksum)
	{
		checksumRef, _checksumRefErr := io.ReadUint16("checksum", 16)
		if _checksumRefErr != nil {
			return nil, errors.Wrap(_checksumRefErr, "Error parsing 'checksum' field")
		}
		checksum, _checksumErr := DF1UtilsCrcCheck(destinationAddress, sourceAddress, command)
		if _checksumErr != nil {
			return nil, errors.Wrap(_checksumErr, "Error parsing 'checksum' field")
		}
		if checksum != checksumRef {
			return nil, errors.Errorf("Checksum verification failed. Expected %d but got %d", (checksumRef & 0xFFFF), (checksum & 0xFFFF))
		}
	}

	if closeErr := io.CloseContext("DF1SymbolMessageFrame"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &DF1SymbolMessageFrame{
		DestinationAddress: destinationAddress,
		SourceAddress:      sourceAddress,
		Command:            command,
		Parent:             &DF1Symbol{},
	}
	_child.Parent.Child = _child
	return _child.Parent, nil
}

func (m *DF1SymbolMessageFrame) Serialize(io utils.WriteBuffer) error {
	ser := func() error {
		if pushErr := io.PushContext("DF1SymbolMessageFrame"); pushErr != nil {
			return pushErr
		}

		// Simple Field (destinationAddress)
		destinationAddress := uint8(m.DestinationAddress)
		_destinationAddressErr := io.WriteUint8("destinationAddress", 8, (destinationAddress))
		if _destinationAddressErr != nil {
			return errors.Wrap(_destinationAddressErr, "Error serializing 'destinationAddress' field")
		}

		// Simple Field (sourceAddress)
		sourceAddress := uint8(m.SourceAddress)
		_sourceAddressErr := io.WriteUint8("sourceAddress", 8, (sourceAddress))
		if _sourceAddressErr != nil {
			return errors.Wrap(_sourceAddressErr, "Error serializing 'sourceAddress' field")
		}

		// Simple Field (command)
		if pushErr := io.PushContext("command"); pushErr != nil {
			return pushErr
		}
		_commandErr := m.Command.Serialize(io)
		if popErr := io.PopContext("command"); popErr != nil {
			return popErr
		}
		if _commandErr != nil {
			return errors.Wrap(_commandErr, "Error serializing 'command' field")
		}

		// Const Field (messageEnd)
		_messageEndErr := io.WriteUint8("messageEnd", 8, 0x10)
		if _messageEndErr != nil {
			return errors.Wrap(_messageEndErr, "Error serializing 'messageEnd' field")
		}

		// Const Field (endTransaction)
		_endTransactionErr := io.WriteUint8("endTransaction", 8, 0x03)
		if _endTransactionErr != nil {
			return errors.Wrap(_endTransactionErr, "Error serializing 'endTransaction' field")
		}

		// Checksum Field (checksum) (Calculated)
		{
			_checksum, _checksumErr := DF1UtilsCrcCheck(m.DestinationAddress, m.SourceAddress, m.Command)
			if _checksumErr != nil {
				return errors.Wrap(_checksumErr, "Error serializing 'checksum' field")
			}
			_checksumErr = io.WriteUint16("checksum", 16, (_checksum))
			if _checksumErr != nil {
				return errors.Wrap(_checksumErr, "Error serializing 'checksum' field")
			}
		}

		if popErr := io.PopContext("DF1SymbolMessageFrame"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.Parent.SerializeParent(io, m, ser)
}

// Deprecated: the utils.ReadBufferWriteBased should be used instead
func (m *DF1SymbolMessageFrame) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var token xml.Token
	var err error
	foundContent := false
	token = start
	for {
		switch token.(type) {
		case xml.StartElement:
			foundContent = true
			tok := token.(xml.StartElement)
			switch tok.Name.Local {
			case "destinationAddress":
				var data uint8
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.DestinationAddress = data
			case "sourceAddress":
				var data uint8
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.SourceAddress = data
			case "command":
				var dt *DF1Command
				if err := d.DecodeElement(&dt, &tok); err != nil {
					if err == io.EOF {
						continue
					}
					return err
				}
				m.Command = dt
			}
		}
		token, err = d.Token()
		if err != nil {
			if err == io.EOF && foundContent {
				return nil
			}
			return err
		}
	}
}

// Deprecated: the utils.WriteBufferReadBased should be used instead
func (m *DF1SymbolMessageFrame) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if err := e.EncodeElement(m.DestinationAddress, xml.StartElement{Name: xml.Name{Local: "destinationAddress"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.SourceAddress, xml.StartElement{Name: xml.Name{Local: "sourceAddress"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.Command, xml.StartElement{Name: xml.Name{Local: "command"}}); err != nil {
		return err
	}
	return nil
}

func (m DF1SymbolMessageFrame) String() string {
	return string(m.Box("", 120))
}

// Deprecated: the utils.WriteBufferBoxBased should be used instead
func (m DF1SymbolMessageFrame) Box(name string, width int) utils.AsciiBox {
	boxName := "DF1SymbolMessageFrame"
	if name != "" {
		boxName += "/" + name
	}
	childBoxer := func() []utils.AsciiBox {
		boxes := make([]utils.AsciiBox, 0)
		// Simple field (case simple)
		// uint8 can be boxed as anything with the least amount of space
		boxes = append(boxes, utils.BoxAnything("DestinationAddress", m.DestinationAddress, -1))
		// Simple field (case simple)
		// uint8 can be boxed as anything with the least amount of space
		boxes = append(boxes, utils.BoxAnything("SourceAddress", m.SourceAddress, -1))
		// Complex field (case complex)
		boxes = append(boxes, m.Command.Box("command", width-2))
		// Const Field (messageEnd)
		boxes = append(boxes, utils.BoxAnything("MessageEnd", uint8(0x10), -1))
		// Const Field (endTransaction)
		boxes = append(boxes, utils.BoxAnything("EndTransaction", uint8(0x03), -1))
		// Checksum Field (checksum) (Calculated)
		_checksum, _ := DF1UtilsCrcCheck(m.DestinationAddress, m.SourceAddress, m.Command)
		boxes = append(boxes, utils.BoxAnything("EndTransaction", _checksum, -1))
		return boxes
	}
	return m.Parent.BoxParent(boxName, width, childBoxer)
}
