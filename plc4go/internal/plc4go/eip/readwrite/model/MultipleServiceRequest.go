//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

package model

import (
	"encoding/xml"
	"fmt"
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"io"
)

// Code generated by build-utils. DO NOT EDIT.

// Constant values.
const MultipleServiceRequest_REQUESTPATHSIZE int8 = 0x02
const MultipleServiceRequest_REQUESTPATH uint32 = 0x01240220

// The data-structure of this message
type MultipleServiceRequest struct {
	Data   *Services
	Parent *CipService
}

// The corresponding interface
type IMultipleServiceRequest interface {
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(io utils.WriteBuffer) error
	xml.Marshaler
	xml.Unmarshaler
}

///////////////////////////////////////////////////////////
// Accessors for discriminator values.
///////////////////////////////////////////////////////////
func (m *MultipleServiceRequest) Service() uint8 {
	return 0x0A
}

func (m *MultipleServiceRequest) InitializeParent(parent *CipService) {
}

func NewMultipleServiceRequest(data *Services) *CipService {
	child := &MultipleServiceRequest{
		Data:   data,
		Parent: NewCipService(),
	}
	child.Parent.Child = child
	return child.Parent
}

func CastMultipleServiceRequest(structType interface{}) *MultipleServiceRequest {
	castFunc := func(typ interface{}) *MultipleServiceRequest {
		if casted, ok := typ.(MultipleServiceRequest); ok {
			return &casted
		}
		if casted, ok := typ.(*MultipleServiceRequest); ok {
			return casted
		}
		if casted, ok := typ.(CipService); ok {
			return CastMultipleServiceRequest(casted.Child)
		}
		if casted, ok := typ.(*CipService); ok {
			return CastMultipleServiceRequest(casted.Child)
		}
		return nil
	}
	return castFunc(structType)
}

func (m *MultipleServiceRequest) GetTypeName() string {
	return "MultipleServiceRequest"
}

func (m *MultipleServiceRequest) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *MultipleServiceRequest) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.Parent.ParentLengthInBits())

	// Const Field (RequestPathSize)
	lengthInBits += 8

	// Const Field (RequestPath)
	lengthInBits += 32

	// Simple field (data)
	lengthInBits += m.Data.LengthInBits()

	return lengthInBits
}

func (m *MultipleServiceRequest) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func MultipleServiceRequestParse(io utils.ReadBuffer, serviceLen uint16) (*CipService, error) {
	if pullErr := io.PullContext("MultipleServiceRequest"); pullErr != nil {
		return nil, pullErr
	}

	// Const Field (RequestPathSize)
	RequestPathSize, _RequestPathSizeErr := io.ReadInt8("RequestPathSize", 8)
	if _RequestPathSizeErr != nil {
		return nil, errors.Wrap(_RequestPathSizeErr, "Error parsing 'RequestPathSize' field")
	}
	if RequestPathSize != MultipleServiceRequest_REQUESTPATHSIZE {
		return nil, errors.New("Expected constant value " + fmt.Sprintf("%d", MultipleServiceRequest_REQUESTPATHSIZE) + " but got " + fmt.Sprintf("%d", RequestPathSize))
	}

	// Const Field (RequestPath)
	RequestPath, _RequestPathErr := io.ReadUint32("RequestPath", 32)
	if _RequestPathErr != nil {
		return nil, errors.Wrap(_RequestPathErr, "Error parsing 'RequestPath' field")
	}
	if RequestPath != MultipleServiceRequest_REQUESTPATH {
		return nil, errors.New("Expected constant value " + fmt.Sprintf("%d", MultipleServiceRequest_REQUESTPATH) + " but got " + fmt.Sprintf("%d", RequestPath))
	}

	if pullErr := io.PullContext("data"); pullErr != nil {
		return nil, pullErr
	}

	// Simple Field (data)
	data, _dataErr := ServicesParse(io, uint16(serviceLen)-uint16(uint16(6)))
	if _dataErr != nil {
		return nil, errors.Wrap(_dataErr, "Error parsing 'data' field")
	}
	if closeErr := io.CloseContext("data"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := io.CloseContext("MultipleServiceRequest"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &MultipleServiceRequest{
		Data:   data,
		Parent: &CipService{},
	}
	_child.Parent.Child = _child
	return _child.Parent, nil
}

func (m *MultipleServiceRequest) Serialize(io utils.WriteBuffer) error {
	ser := func() error {
		if pushErr := io.PushContext("MultipleServiceRequest"); pushErr != nil {
			return pushErr
		}

		// Const Field (RequestPathSize)
		_RequestPathSizeErr := io.WriteInt8("RequestPathSize", 8, 0x02)
		if _RequestPathSizeErr != nil {
			return errors.Wrap(_RequestPathSizeErr, "Error serializing 'RequestPathSize' field")
		}

		// Const Field (RequestPath)
		_RequestPathErr := io.WriteUint32("RequestPath", 32, 0x01240220)
		if _RequestPathErr != nil {
			return errors.Wrap(_RequestPathErr, "Error serializing 'RequestPath' field")
		}

		// Simple Field (data)
		if pushErr := io.PushContext("data"); pushErr != nil {
			return pushErr
		}
		_dataErr := m.Data.Serialize(io)
		if popErr := io.PopContext("data"); popErr != nil {
			return popErr
		}
		if _dataErr != nil {
			return errors.Wrap(_dataErr, "Error serializing 'data' field")
		}

		if popErr := io.PopContext("MultipleServiceRequest"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.Parent.SerializeParent(io, m, ser)
}

// Deprecated: the utils.ReadBufferWriteBased should be used instead
func (m *MultipleServiceRequest) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var token xml.Token
	var err error
	foundContent := false
	token = start
	for {
		switch token.(type) {
		case xml.StartElement:
			foundContent = true
			tok := token.(xml.StartElement)
			switch tok.Name.Local {
			case "data":
				var data Services
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.Data = &data
			}
		}
		token, err = d.Token()
		if err != nil {
			if err == io.EOF && foundContent {
				return nil
			}
			return err
		}
	}
}

// Deprecated: the utils.WriteBufferReadBased should be used instead
func (m *MultipleServiceRequest) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if err := e.EncodeElement(m.Data, xml.StartElement{Name: xml.Name{Local: "data"}}); err != nil {
		return err
	}
	return nil
}

func (m MultipleServiceRequest) String() string {
	return string(m.Box("", 120))
}

// Deprecated: the utils.WriteBufferBoxBased should be used instead
func (m MultipleServiceRequest) Box(name string, width int) utils.AsciiBox {
	boxName := "MultipleServiceRequest"
	if name != "" {
		boxName += "/" + name
	}
	childBoxer := func() []utils.AsciiBox {
		boxes := make([]utils.AsciiBox, 0)
		// Const Field (RequestPathSize)
		boxes = append(boxes, utils.BoxAnything("RequestPathSize", int8(0x02), -1))
		// Const Field (RequestPath)
		boxes = append(boxes, utils.BoxAnything("RequestPath", uint32(0x01240220), -1))
		// Complex field (case complex)
		boxes = append(boxes, m.Data.Box("data", width-2))
		return boxes
	}
	return m.Parent.BoxParent(boxName, width, childBoxer)
}
