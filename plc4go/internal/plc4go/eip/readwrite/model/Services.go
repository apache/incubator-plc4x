//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

package model

import (
	"encoding/xml"
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"io"
)

// Code generated by build-utils. DO NOT EDIT.

// The data-structure of this message
type Services struct {
	ServiceNb uint16
	Offsets   []uint16
	Services  []*CipService
}

// The corresponding interface
type IServices interface {
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(io utils.WriteBuffer) error
	xml.Marshaler
	xml.Unmarshaler
}

func NewServices(serviceNb uint16, offsets []uint16, services []*CipService) *Services {
	return &Services{ServiceNb: serviceNb, Offsets: offsets, Services: services}
}

func CastServices(structType interface{}) *Services {
	castFunc := func(typ interface{}) *Services {
		if casted, ok := typ.(Services); ok {
			return &casted
		}
		if casted, ok := typ.(*Services); ok {
			return casted
		}
		return nil
	}
	return castFunc(structType)
}

func (m *Services) GetTypeName() string {
	return "Services"
}

func (m *Services) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *Services) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (serviceNb)
	lengthInBits += 16

	// Array field
	if len(m.Offsets) > 0 {
		lengthInBits += 16 * uint16(len(m.Offsets))
	}

	// Array field
	if len(m.Services) > 0 {
		for i, element := range m.Services {
			last := i == len(m.Services)-1
			lengthInBits += element.LengthInBitsConditional(last)
		}
	}

	return lengthInBits
}

func (m *Services) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func ServicesParse(io utils.ReadBuffer, servicesLen uint16) (*Services, error) {
	if pullErr := io.PullContext("Services"); pullErr != nil {
		return nil, pullErr
	}

	// Simple Field (serviceNb)
	serviceNb, _serviceNbErr := io.ReadUint16("serviceNb", 16)
	if _serviceNbErr != nil {
		return nil, errors.Wrap(_serviceNbErr, "Error parsing 'serviceNb' field")
	}

	// Array field (offsets)
	if pullErr := io.PullContext("offsets", utils.WithRenderAsList(true)); pullErr != nil {
		return nil, pullErr
	}
	// Count array
	offsets := make([]uint16, serviceNb)
	for curItem := uint16(0); curItem < uint16(serviceNb); curItem++ {
		_item, _err := io.ReadUint16("", 16)
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing 'offsets' field")
		}
		offsets[curItem] = _item
	}
	if closeErr := io.CloseContext("offsets", utils.WithRenderAsList(true)); closeErr != nil {
		return nil, closeErr
	}

	// Array field (services)
	if pullErr := io.PullContext("services", utils.WithRenderAsList(true)); pullErr != nil {
		return nil, pullErr
	}
	// Count array
	services := make([]*CipService, serviceNb)
	for curItem := uint16(0); curItem < uint16(serviceNb); curItem++ {
		_item, _err := CipServiceParse(io, uint16(servicesLen)/uint16(serviceNb))
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing 'services' field")
		}
		services[curItem] = _item
	}
	if closeErr := io.CloseContext("services", utils.WithRenderAsList(true)); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := io.CloseContext("Services"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewServices(serviceNb, offsets, services), nil
}

func (m *Services) Serialize(io utils.WriteBuffer) error {
	if pushErr := io.PushContext("Services"); pushErr != nil {
		return pushErr
	}

	// Simple Field (serviceNb)
	serviceNb := uint16(m.ServiceNb)
	_serviceNbErr := io.WriteUint16("serviceNb", 16, (serviceNb))
	if _serviceNbErr != nil {
		return errors.Wrap(_serviceNbErr, "Error serializing 'serviceNb' field")
	}

	// Array Field (offsets)
	if m.Offsets != nil {
		if pushErr := io.PushContext("offsets", utils.WithRenderAsList(true)); pushErr != nil {
			return pushErr
		}
		for _, _element := range m.Offsets {
			_elementErr := io.WriteUint16("", 16, _element)
			if _elementErr != nil {
				return errors.Wrap(_elementErr, "Error serializing 'offsets' field")
			}
		}
		if popErr := io.PopContext("offsets", utils.WithRenderAsList(true)); popErr != nil {
			return popErr
		}
	}

	// Array Field (services)
	if m.Services != nil {
		if pushErr := io.PushContext("services", utils.WithRenderAsList(true)); pushErr != nil {
			return pushErr
		}
		for _, _element := range m.Services {
			_elementErr := _element.Serialize(io)
			if _elementErr != nil {
				return errors.Wrap(_elementErr, "Error serializing 'services' field")
			}
		}
		if popErr := io.PopContext("services", utils.WithRenderAsList(true)); popErr != nil {
			return popErr
		}
	}

	if popErr := io.PopContext("Services"); popErr != nil {
		return popErr
	}
	return nil
}

// Deprecated: the utils.ReadBufferWriteBased should be used instead
func (m *Services) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var token xml.Token
	var err error
	foundContent := false
	for {
		token, err = d.Token()
		if err != nil {
			if err == io.EOF && foundContent {
				return nil
			}
			return err
		}
		switch token.(type) {
		case xml.StartElement:
			foundContent = true
			tok := token.(xml.StartElement)
			switch tok.Name.Local {
			case "serviceNb":
				var data uint16
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.ServiceNb = data
			case "offsets":
				var data []uint16
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.Offsets = data
			case "services":
			arrayLoop:
				for {
					token, err = d.Token()
					switch token.(type) {
					case xml.StartElement:
						tok := token.(xml.StartElement)
						var dt *CipService
						if err := d.DecodeElement(&dt, &tok); err != nil {
							return err
						}
						m.Services = append(m.Services, dt)
					default:
						break arrayLoop
					}
				}
			}
		}
	}
}

// Deprecated: the utils.WriteBufferReadBased should be used instead
func (m *Services) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	className := "org.apache.plc4x.java.eip.readwrite.Services"
	if err := e.EncodeToken(xml.StartElement{Name: start.Name, Attr: []xml.Attr{
		{Name: xml.Name{Local: "className"}, Value: className},
	}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.ServiceNb, xml.StartElement{Name: xml.Name{Local: "serviceNb"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.Offsets, xml.StartElement{Name: xml.Name{Local: "offsets"}}); err != nil {
		return err
	}
	if err := e.EncodeToken(xml.StartElement{Name: xml.Name{Local: "services"}}); err != nil {
		return err
	}
	for _, arrayElement := range m.Services {
		if err := e.EncodeElement(arrayElement, xml.StartElement{Name: xml.Name{Local: "services"}}); err != nil {
			return err
		}
	}
	if err := e.EncodeToken(xml.EndElement{Name: xml.Name{Local: "services"}}); err != nil {
		return err
	}
	if err := e.EncodeToken(xml.EndElement{Name: start.Name}); err != nil {
		return err
	}
	return nil
}

func (m Services) String() string {
	return string(m.Box("", 120))
}

// Deprecated: the utils.WriteBufferBoxBased should be used instead
func (m Services) Box(name string, width int) utils.AsciiBox {
	boxName := "Services"
	if name != "" {
		boxName += "/" + name
	}
	boxes := make([]utils.AsciiBox, 0)
	// Simple field (case simple)
	// uint16 can be boxed as anything with the least amount of space
	boxes = append(boxes, utils.BoxAnything("ServiceNb", m.ServiceNb, -1))
	// Array Field (offsets)
	if m.Offsets != nil {
		// Simple array base type uint16 will be rendered one by one
		arrayBoxes := make([]utils.AsciiBox, 0)
		for _, _element := range m.Offsets {
			arrayBoxes = append(arrayBoxes, utils.BoxAnything("", _element, width-2))
		}
		boxes = append(boxes, utils.BoxBox("Offsets", utils.AlignBoxes(arrayBoxes, width-4), 0))
	}
	// Array Field (services)
	if m.Services != nil {
		// Complex array base type
		arrayBoxes := make([]utils.AsciiBox, 0)
		for _, _element := range m.Services {
			arrayBoxes = append(arrayBoxes, utils.BoxAnything("", _element, width-2))
		}
		boxes = append(boxes, utils.BoxBox("Services", utils.AlignBoxes(arrayBoxes, width-4), 0))
	}
	return utils.BoxBox(boxName, utils.AlignBoxes(boxes, width-2), 0)
}
