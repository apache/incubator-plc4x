//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

package model

import (
	"encoding/hex"
	"encoding/xml"
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"io"
	"strings"
)

// Code generated by build-utils. DO NOT EDIT.

// The data-structure of this message
type DIBDeviceInfo struct {
	DescriptionType                uint8
	KnxMedium                      KnxMedium
	DeviceStatus                   *DeviceStatus
	KnxAddress                     *KnxAddress
	ProjectInstallationIdentifier  *ProjectInstallationIdentifier
	KnxNetIpDeviceSerialNumber     []int8
	KnxNetIpDeviceMulticastAddress *IPAddress
	KnxNetIpDeviceMacAddress       *MACAddress
	DeviceFriendlyName             []int8
}

// The corresponding interface
type IDIBDeviceInfo interface {
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(io utils.WriteBuffer) error
	xml.Marshaler
	xml.Unmarshaler
}

func NewDIBDeviceInfo(descriptionType uint8, knxMedium KnxMedium, deviceStatus *DeviceStatus, knxAddress *KnxAddress, projectInstallationIdentifier *ProjectInstallationIdentifier, knxNetIpDeviceSerialNumber []int8, knxNetIpDeviceMulticastAddress *IPAddress, knxNetIpDeviceMacAddress *MACAddress, deviceFriendlyName []int8) *DIBDeviceInfo {
	return &DIBDeviceInfo{DescriptionType: descriptionType, KnxMedium: knxMedium, DeviceStatus: deviceStatus, KnxAddress: knxAddress, ProjectInstallationIdentifier: projectInstallationIdentifier, KnxNetIpDeviceSerialNumber: knxNetIpDeviceSerialNumber, KnxNetIpDeviceMulticastAddress: knxNetIpDeviceMulticastAddress, KnxNetIpDeviceMacAddress: knxNetIpDeviceMacAddress, DeviceFriendlyName: deviceFriendlyName}
}

func CastDIBDeviceInfo(structType interface{}) *DIBDeviceInfo {
	castFunc := func(typ interface{}) *DIBDeviceInfo {
		if casted, ok := typ.(DIBDeviceInfo); ok {
			return &casted
		}
		if casted, ok := typ.(*DIBDeviceInfo); ok {
			return casted
		}
		return nil
	}
	return castFunc(structType)
}

func (m *DIBDeviceInfo) GetTypeName() string {
	return "DIBDeviceInfo"
}

func (m *DIBDeviceInfo) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *DIBDeviceInfo) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Implicit Field (structureLength)
	lengthInBits += 8

	// Simple field (descriptionType)
	lengthInBits += 8

	// Simple field (knxMedium)
	lengthInBits += 8

	// Simple field (deviceStatus)
	lengthInBits += m.DeviceStatus.LengthInBits()

	// Simple field (knxAddress)
	lengthInBits += m.KnxAddress.LengthInBits()

	// Simple field (projectInstallationIdentifier)
	lengthInBits += m.ProjectInstallationIdentifier.LengthInBits()

	// Array field
	if len(m.KnxNetIpDeviceSerialNumber) > 0 {
		lengthInBits += 8 * uint16(len(m.KnxNetIpDeviceSerialNumber))
	}

	// Simple field (knxNetIpDeviceMulticastAddress)
	lengthInBits += m.KnxNetIpDeviceMulticastAddress.LengthInBits()

	// Simple field (knxNetIpDeviceMacAddress)
	lengthInBits += m.KnxNetIpDeviceMacAddress.LengthInBits()

	// Array field
	if len(m.DeviceFriendlyName) > 0 {
		lengthInBits += 8 * uint16(len(m.DeviceFriendlyName))
	}

	return lengthInBits
}

func (m *DIBDeviceInfo) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func DIBDeviceInfoParse(io utils.ReadBuffer) (*DIBDeviceInfo, error) {
	if pullErr := io.PullContext("DIBDeviceInfo"); pullErr != nil {
		return nil, pullErr
	}

	// Implicit Field (structureLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
	structureLength, _structureLengthErr := io.ReadUint8("structureLength", 8)
	_ = structureLength
	if _structureLengthErr != nil {
		return nil, errors.Wrap(_structureLengthErr, "Error parsing 'structureLength' field")
	}

	// Simple Field (descriptionType)
	descriptionType, _descriptionTypeErr := io.ReadUint8("descriptionType", 8)
	if _descriptionTypeErr != nil {
		return nil, errors.Wrap(_descriptionTypeErr, "Error parsing 'descriptionType' field")
	}

	if pullErr := io.PullContext("knxMedium"); pullErr != nil {
		return nil, pullErr
	}

	// Simple Field (knxMedium)
	knxMedium, _knxMediumErr := KnxMediumParse(io)
	if _knxMediumErr != nil {
		return nil, errors.Wrap(_knxMediumErr, "Error parsing 'knxMedium' field")
	}
	if closeErr := io.CloseContext("knxMedium"); closeErr != nil {
		return nil, closeErr
	}

	if pullErr := io.PullContext("deviceStatus"); pullErr != nil {
		return nil, pullErr
	}

	// Simple Field (deviceStatus)
	deviceStatus, _deviceStatusErr := DeviceStatusParse(io)
	if _deviceStatusErr != nil {
		return nil, errors.Wrap(_deviceStatusErr, "Error parsing 'deviceStatus' field")
	}
	if closeErr := io.CloseContext("deviceStatus"); closeErr != nil {
		return nil, closeErr
	}

	if pullErr := io.PullContext("knxAddress"); pullErr != nil {
		return nil, pullErr
	}

	// Simple Field (knxAddress)
	knxAddress, _knxAddressErr := KnxAddressParse(io)
	if _knxAddressErr != nil {
		return nil, errors.Wrap(_knxAddressErr, "Error parsing 'knxAddress' field")
	}
	if closeErr := io.CloseContext("knxAddress"); closeErr != nil {
		return nil, closeErr
	}

	if pullErr := io.PullContext("projectInstallationIdentifier"); pullErr != nil {
		return nil, pullErr
	}

	// Simple Field (projectInstallationIdentifier)
	projectInstallationIdentifier, _projectInstallationIdentifierErr := ProjectInstallationIdentifierParse(io)
	if _projectInstallationIdentifierErr != nil {
		return nil, errors.Wrap(_projectInstallationIdentifierErr, "Error parsing 'projectInstallationIdentifier' field")
	}
	if closeErr := io.CloseContext("projectInstallationIdentifier"); closeErr != nil {
		return nil, closeErr
	}

	// Array field (knxNetIpDeviceSerialNumber)
	if pullErr := io.PullContext("knxNetIpDeviceSerialNumber", utils.WithRenderAsList(true)); pullErr != nil {
		return nil, pullErr
	}
	// Count array
	knxNetIpDeviceSerialNumber := make([]int8, uint16(6))
	for curItem := uint16(0); curItem < uint16(uint16(6)); curItem++ {
		_item, _err := io.ReadInt8("", 8)
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing 'knxNetIpDeviceSerialNumber' field")
		}
		knxNetIpDeviceSerialNumber[curItem] = _item
	}
	if closeErr := io.CloseContext("knxNetIpDeviceSerialNumber", utils.WithRenderAsList(true)); closeErr != nil {
		return nil, closeErr
	}

	if pullErr := io.PullContext("knxNetIpDeviceMulticastAddress"); pullErr != nil {
		return nil, pullErr
	}

	// Simple Field (knxNetIpDeviceMulticastAddress)
	knxNetIpDeviceMulticastAddress, _knxNetIpDeviceMulticastAddressErr := IPAddressParse(io)
	if _knxNetIpDeviceMulticastAddressErr != nil {
		return nil, errors.Wrap(_knxNetIpDeviceMulticastAddressErr, "Error parsing 'knxNetIpDeviceMulticastAddress' field")
	}
	if closeErr := io.CloseContext("knxNetIpDeviceMulticastAddress"); closeErr != nil {
		return nil, closeErr
	}

	if pullErr := io.PullContext("knxNetIpDeviceMacAddress"); pullErr != nil {
		return nil, pullErr
	}

	// Simple Field (knxNetIpDeviceMacAddress)
	knxNetIpDeviceMacAddress, _knxNetIpDeviceMacAddressErr := MACAddressParse(io)
	if _knxNetIpDeviceMacAddressErr != nil {
		return nil, errors.Wrap(_knxNetIpDeviceMacAddressErr, "Error parsing 'knxNetIpDeviceMacAddress' field")
	}
	if closeErr := io.CloseContext("knxNetIpDeviceMacAddress"); closeErr != nil {
		return nil, closeErr
	}

	// Array field (deviceFriendlyName)
	if pullErr := io.PullContext("deviceFriendlyName", utils.WithRenderAsList(true)); pullErr != nil {
		return nil, pullErr
	}
	// Count array
	deviceFriendlyName := make([]int8, uint16(30))
	for curItem := uint16(0); curItem < uint16(uint16(30)); curItem++ {
		_item, _err := io.ReadInt8("", 8)
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing 'deviceFriendlyName' field")
		}
		deviceFriendlyName[curItem] = _item
	}
	if closeErr := io.CloseContext("deviceFriendlyName", utils.WithRenderAsList(true)); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := io.CloseContext("DIBDeviceInfo"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewDIBDeviceInfo(descriptionType, knxMedium, deviceStatus, knxAddress, projectInstallationIdentifier, knxNetIpDeviceSerialNumber, knxNetIpDeviceMulticastAddress, knxNetIpDeviceMacAddress, deviceFriendlyName), nil
}

func (m *DIBDeviceInfo) Serialize(io utils.WriteBuffer) error {
	if pushErr := io.PushContext("DIBDeviceInfo"); pushErr != nil {
		return pushErr
	}

	// Implicit Field (structureLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
	structureLength := uint8(uint8(m.LengthInBytes()))
	_structureLengthErr := io.WriteUint8("structureLength", 8, (structureLength))
	if _structureLengthErr != nil {
		return errors.Wrap(_structureLengthErr, "Error serializing 'structureLength' field")
	}

	// Simple Field (descriptionType)
	descriptionType := uint8(m.DescriptionType)
	_descriptionTypeErr := io.WriteUint8("descriptionType", 8, (descriptionType))
	if _descriptionTypeErr != nil {
		return errors.Wrap(_descriptionTypeErr, "Error serializing 'descriptionType' field")
	}

	// Simple Field (knxMedium)
	if pushErr := io.PushContext("knxMedium"); pushErr != nil {
		return pushErr
	}
	_knxMediumErr := m.KnxMedium.Serialize(io)
	if popErr := io.PopContext("knxMedium"); popErr != nil {
		return popErr
	}
	if _knxMediumErr != nil {
		return errors.Wrap(_knxMediumErr, "Error serializing 'knxMedium' field")
	}

	// Simple Field (deviceStatus)
	if pushErr := io.PushContext("deviceStatus"); pushErr != nil {
		return pushErr
	}
	_deviceStatusErr := m.DeviceStatus.Serialize(io)
	if popErr := io.PopContext("deviceStatus"); popErr != nil {
		return popErr
	}
	if _deviceStatusErr != nil {
		return errors.Wrap(_deviceStatusErr, "Error serializing 'deviceStatus' field")
	}

	// Simple Field (knxAddress)
	if pushErr := io.PushContext("knxAddress"); pushErr != nil {
		return pushErr
	}
	_knxAddressErr := m.KnxAddress.Serialize(io)
	if popErr := io.PopContext("knxAddress"); popErr != nil {
		return popErr
	}
	if _knxAddressErr != nil {
		return errors.Wrap(_knxAddressErr, "Error serializing 'knxAddress' field")
	}

	// Simple Field (projectInstallationIdentifier)
	if pushErr := io.PushContext("projectInstallationIdentifier"); pushErr != nil {
		return pushErr
	}
	_projectInstallationIdentifierErr := m.ProjectInstallationIdentifier.Serialize(io)
	if popErr := io.PopContext("projectInstallationIdentifier"); popErr != nil {
		return popErr
	}
	if _projectInstallationIdentifierErr != nil {
		return errors.Wrap(_projectInstallationIdentifierErr, "Error serializing 'projectInstallationIdentifier' field")
	}

	// Array Field (knxNetIpDeviceSerialNumber)
	if m.KnxNetIpDeviceSerialNumber != nil {
		if pushErr := io.PushContext("knxNetIpDeviceSerialNumber", utils.WithRenderAsList(true)); pushErr != nil {
			return pushErr
		}
		for _, _element := range m.KnxNetIpDeviceSerialNumber {
			_elementErr := io.WriteInt8("", 8, _element)
			if _elementErr != nil {
				return errors.Wrap(_elementErr, "Error serializing 'knxNetIpDeviceSerialNumber' field")
			}
		}
		if popErr := io.PopContext("knxNetIpDeviceSerialNumber", utils.WithRenderAsList(true)); popErr != nil {
			return popErr
		}
	}

	// Simple Field (knxNetIpDeviceMulticastAddress)
	if pushErr := io.PushContext("knxNetIpDeviceMulticastAddress"); pushErr != nil {
		return pushErr
	}
	_knxNetIpDeviceMulticastAddressErr := m.KnxNetIpDeviceMulticastAddress.Serialize(io)
	if popErr := io.PopContext("knxNetIpDeviceMulticastAddress"); popErr != nil {
		return popErr
	}
	if _knxNetIpDeviceMulticastAddressErr != nil {
		return errors.Wrap(_knxNetIpDeviceMulticastAddressErr, "Error serializing 'knxNetIpDeviceMulticastAddress' field")
	}

	// Simple Field (knxNetIpDeviceMacAddress)
	if pushErr := io.PushContext("knxNetIpDeviceMacAddress"); pushErr != nil {
		return pushErr
	}
	_knxNetIpDeviceMacAddressErr := m.KnxNetIpDeviceMacAddress.Serialize(io)
	if popErr := io.PopContext("knxNetIpDeviceMacAddress"); popErr != nil {
		return popErr
	}
	if _knxNetIpDeviceMacAddressErr != nil {
		return errors.Wrap(_knxNetIpDeviceMacAddressErr, "Error serializing 'knxNetIpDeviceMacAddress' field")
	}

	// Array Field (deviceFriendlyName)
	if m.DeviceFriendlyName != nil {
		if pushErr := io.PushContext("deviceFriendlyName", utils.WithRenderAsList(true)); pushErr != nil {
			return pushErr
		}
		for _, _element := range m.DeviceFriendlyName {
			_elementErr := io.WriteInt8("", 8, _element)
			if _elementErr != nil {
				return errors.Wrap(_elementErr, "Error serializing 'deviceFriendlyName' field")
			}
		}
		if popErr := io.PopContext("deviceFriendlyName", utils.WithRenderAsList(true)); popErr != nil {
			return popErr
		}
	}

	if popErr := io.PopContext("DIBDeviceInfo"); popErr != nil {
		return popErr
	}
	return nil
}

// Deprecated: the utils.ReadBufferWriteBased should be used instead
func (m *DIBDeviceInfo) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var token xml.Token
	var err error
	foundContent := false
	for {
		token, err = d.Token()
		if err != nil {
			if err == io.EOF && foundContent {
				return nil
			}
			return err
		}
		switch token.(type) {
		case xml.StartElement:
			foundContent = true
			tok := token.(xml.StartElement)
			switch tok.Name.Local {
			case "descriptionType":
				var data uint8
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.DescriptionType = data
			case "knxMedium":
				var data KnxMedium
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.KnxMedium = data
			case "deviceStatus":
				var data DeviceStatus
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.DeviceStatus = &data
			case "knxAddress":
				var data KnxAddress
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.KnxAddress = &data
			case "projectInstallationIdentifier":
				var data ProjectInstallationIdentifier
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.ProjectInstallationIdentifier = &data
			case "knxNetIpDeviceSerialNumber":
				var _encoded string
				if err := d.DecodeElement(&_encoded, &tok); err != nil {
					return err
				}
				_decoded, err := hex.DecodeString(_encoded)
				_len := len(_decoded)
				if err != nil {
					return err
				}
				m.KnxNetIpDeviceSerialNumber = utils.ByteArrayToInt8Array(_decoded[0:_len])
			case "knxNetIpDeviceMulticastAddress":
				var data IPAddress
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.KnxNetIpDeviceMulticastAddress = &data
			case "knxNetIpDeviceMacAddress":
				var data MACAddress
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.KnxNetIpDeviceMacAddress = &data
			case "deviceFriendlyName":
				var _encoded string
				if err := d.DecodeElement(&_encoded, &tok); err != nil {
					return err
				}
				_decoded, err := hex.DecodeString(_encoded)
				_len := len(_decoded)
				if err != nil {
					return err
				}
				m.DeviceFriendlyName = utils.ByteArrayToInt8Array(_decoded[0:_len])
			}
		}
	}
}

// Deprecated: the utils.WriteBufferReadBased should be used instead
func (m *DIBDeviceInfo) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	className := "org.apache.plc4x.java.knxnetip.readwrite.DIBDeviceInfo"
	if err := e.EncodeToken(xml.StartElement{Name: start.Name, Attr: []xml.Attr{
		{Name: xml.Name{Local: "className"}, Value: className},
	}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.DescriptionType, xml.StartElement{Name: xml.Name{Local: "descriptionType"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.KnxMedium, xml.StartElement{Name: xml.Name{Local: "knxMedium"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.DeviceStatus, xml.StartElement{Name: xml.Name{Local: "deviceStatus"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.KnxAddress, xml.StartElement{Name: xml.Name{Local: "knxAddress"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.ProjectInstallationIdentifier, xml.StartElement{Name: xml.Name{Local: "projectInstallationIdentifier"}}); err != nil {
		return err
	}
	_encodedKnxNetIpDeviceSerialNumber := hex.EncodeToString(utils.Int8ArrayToByteArray(m.KnxNetIpDeviceSerialNumber))
	_encodedKnxNetIpDeviceSerialNumber = strings.ToUpper(_encodedKnxNetIpDeviceSerialNumber)
	if err := e.EncodeElement(_encodedKnxNetIpDeviceSerialNumber, xml.StartElement{Name: xml.Name{Local: "knxNetIpDeviceSerialNumber"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.KnxNetIpDeviceMulticastAddress, xml.StartElement{Name: xml.Name{Local: "knxNetIpDeviceMulticastAddress"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.KnxNetIpDeviceMacAddress, xml.StartElement{Name: xml.Name{Local: "knxNetIpDeviceMacAddress"}}); err != nil {
		return err
	}
	_encodedDeviceFriendlyName := hex.EncodeToString(utils.Int8ArrayToByteArray(m.DeviceFriendlyName))
	_encodedDeviceFriendlyName = strings.ToUpper(_encodedDeviceFriendlyName)
	if err := e.EncodeElement(_encodedDeviceFriendlyName, xml.StartElement{Name: xml.Name{Local: "deviceFriendlyName"}}); err != nil {
		return err
	}
	if err := e.EncodeToken(xml.EndElement{Name: start.Name}); err != nil {
		return err
	}
	return nil
}

func (m DIBDeviceInfo) String() string {
	return string(m.Box("", 120))
}

// Deprecated: the utils.WriteBufferBoxBased should be used instead
func (m DIBDeviceInfo) Box(name string, width int) utils.AsciiBox {
	boxName := "DIBDeviceInfo"
	if name != "" {
		boxName += "/" + name
	}
	boxes := make([]utils.AsciiBox, 0)
	// Implicit Field (structureLength)
	structureLength := uint8(uint8(m.LengthInBytes()))
	// uint8 can be boxed as anything with the least amount of space
	boxes = append(boxes, utils.BoxAnything("StructureLength", structureLength, -1))
	// Simple field (case simple)
	// uint8 can be boxed as anything with the least amount of space
	boxes = append(boxes, utils.BoxAnything("DescriptionType", m.DescriptionType, -1))
	// Complex field (case complex)
	boxes = append(boxes, m.KnxMedium.Box("knxMedium", width-2))
	// Complex field (case complex)
	boxes = append(boxes, m.DeviceStatus.Box("deviceStatus", width-2))
	// Complex field (case complex)
	boxes = append(boxes, m.KnxAddress.Box("knxAddress", width-2))
	// Complex field (case complex)
	boxes = append(boxes, m.ProjectInstallationIdentifier.Box("projectInstallationIdentifier", width-2))
	// Array Field (knxNetIpDeviceSerialNumber)
	if m.KnxNetIpDeviceSerialNumber != nil {
		// Simple array base type int8 will be rendered one by one
		arrayBoxes := make([]utils.AsciiBox, 0)
		for _, _element := range m.KnxNetIpDeviceSerialNumber {
			arrayBoxes = append(arrayBoxes, utils.BoxAnything("", _element, width-2))
		}
		boxes = append(boxes, utils.BoxBox("KnxNetIpDeviceSerialNumber", utils.AlignBoxes(arrayBoxes, width-4), 0))
	}
	// Complex field (case complex)
	boxes = append(boxes, m.KnxNetIpDeviceMulticastAddress.Box("knxNetIpDeviceMulticastAddress", width-2))
	// Complex field (case complex)
	boxes = append(boxes, m.KnxNetIpDeviceMacAddress.Box("knxNetIpDeviceMacAddress", width-2))
	// Array Field (deviceFriendlyName)
	if m.DeviceFriendlyName != nil {
		// Simple array base type int8 will be rendered one by one
		arrayBoxes := make([]utils.AsciiBox, 0)
		for _, _element := range m.DeviceFriendlyName {
			arrayBoxes = append(arrayBoxes, utils.BoxAnything("", _element, width-2))
		}
		boxes = append(boxes, utils.BoxBox("DeviceFriendlyName", utils.AlignBoxes(arrayBoxes, width-4), 0))
	}
	return utils.BoxBox(boxName, utils.AlignBoxes(boxes, width-2), 0)
}
