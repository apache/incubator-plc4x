//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

package model

import (
	"encoding/xml"
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"io"
	"reflect"
	"strings"
)

// Code generated by build-utils. DO NOT EDIT.

// The data-structure of this message
type SysexCommand struct {
	Child ISysexCommandChild
}

// The corresponding interface
type ISysexCommand interface {
	CommandType() uint8
	Response() bool
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(io utils.WriteBuffer) error
	xml.Marshaler
	xml.Unmarshaler
}

type ISysexCommandParent interface {
	SerializeParent(io utils.WriteBuffer, child ISysexCommand, serializeChildFunction func() error) error
	GetTypeName() string
}

type ISysexCommandChild interface {
	Serialize(io utils.WriteBuffer) error
	InitializeParent(parent *SysexCommand)
	GetTypeName() string
	ISysexCommand
	utils.AsciiBoxer
}

func NewSysexCommand() *SysexCommand {
	return &SysexCommand{}
}

func CastSysexCommand(structType interface{}) *SysexCommand {
	castFunc := func(typ interface{}) *SysexCommand {
		if casted, ok := typ.(SysexCommand); ok {
			return &casted
		}
		if casted, ok := typ.(*SysexCommand); ok {
			return casted
		}
		return nil
	}
	return castFunc(structType)
}

func (m *SysexCommand) GetTypeName() string {
	return "SysexCommand"
}

func (m *SysexCommand) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *SysexCommand) LengthInBitsConditional(lastItem bool) uint16 {
	return m.Child.LengthInBits()
}

func (m *SysexCommand) ParentLengthInBits() uint16 {
	lengthInBits := uint16(0)
	// Discriminator Field (commandType)
	lengthInBits += 8

	return lengthInBits
}

func (m *SysexCommand) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func SysexCommandParse(io utils.ReadBuffer, response bool) (*SysexCommand, error) {
	if pullErr := io.PullContext("SysexCommand"); pullErr != nil {
		return nil, pullErr
	}

	// Discriminator Field (commandType) (Used as input to a switch field)
	commandType, _commandTypeErr := io.ReadUint8("commandType", 8)
	if _commandTypeErr != nil {
		return nil, errors.Wrap(_commandTypeErr, "Error parsing 'commandType' field")
	}

	// Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
	var _parent *SysexCommand
	var typeSwitchError error
	switch {
	case commandType == 0x00: // SysexCommandExendedId
		_parent, typeSwitchError = SysexCommandExendedIdParse(io)
	case commandType == 0x69 && response == false: // SysexCommandAnalogMappingQueryRequest
		_parent, typeSwitchError = SysexCommandAnalogMappingQueryRequestParse(io)
	case commandType == 0x69 && response == true: // SysexCommandAnalogMappingQueryResponse
		_parent, typeSwitchError = SysexCommandAnalogMappingQueryResponseParse(io)
	case commandType == 0x6A: // SysexCommandAnalogMappingResponse
		_parent, typeSwitchError = SysexCommandAnalogMappingResponseParse(io)
	case commandType == 0x6B: // SysexCommandCapabilityQuery
		_parent, typeSwitchError = SysexCommandCapabilityQueryParse(io)
	case commandType == 0x6C: // SysexCommandCapabilityResponse
		_parent, typeSwitchError = SysexCommandCapabilityResponseParse(io)
	case commandType == 0x6D: // SysexCommandPinStateQuery
		_parent, typeSwitchError = SysexCommandPinStateQueryParse(io)
	case commandType == 0x6E: // SysexCommandPinStateResponse
		_parent, typeSwitchError = SysexCommandPinStateResponseParse(io)
	case commandType == 0x6F: // SysexCommandExtendedAnalog
		_parent, typeSwitchError = SysexCommandExtendedAnalogParse(io)
	case commandType == 0x71: // SysexCommandStringData
		_parent, typeSwitchError = SysexCommandStringDataParse(io)
	case commandType == 0x79 && response == false: // SysexCommandReportFirmwareRequest
		_parent, typeSwitchError = SysexCommandReportFirmwareRequestParse(io)
	case commandType == 0x79 && response == true: // SysexCommandReportFirmwareResponse
		_parent, typeSwitchError = SysexCommandReportFirmwareResponseParse(io)
	case commandType == 0x7A: // SysexCommandSamplingInterval
		_parent, typeSwitchError = SysexCommandSamplingIntervalParse(io)
	case commandType == 0x7E: // SysexCommandSysexNonRealtime
		_parent, typeSwitchError = SysexCommandSysexNonRealtimeParse(io)
	case commandType == 0x7F: // SysexCommandSysexRealtime
		_parent, typeSwitchError = SysexCommandSysexRealtimeParse(io)
	default:
		// TODO: return actual type
		typeSwitchError = errors.New("Unmapped type")
	}
	if typeSwitchError != nil {
		return nil, errors.Wrap(typeSwitchError, "Error parsing sub-type for type-switch.")
	}

	if closeErr := io.CloseContext("SysexCommand"); closeErr != nil {
		return nil, closeErr
	}

	// Finish initializing
	_parent.Child.InitializeParent(_parent)
	return _parent, nil
}

func (m *SysexCommand) Serialize(io utils.WriteBuffer) error {
	return m.Child.Serialize(io)
}

func (m *SysexCommand) SerializeParent(io utils.WriteBuffer, child ISysexCommand, serializeChildFunction func() error) error {
	if pushErr := io.PushContext("SysexCommand"); pushErr != nil {
		return pushErr
	}

	// Discriminator Field (commandType) (Used as input to a switch field)
	commandType := uint8(child.CommandType())
	_commandTypeErr := io.WriteUint8("commandType", 8, (commandType))

	if _commandTypeErr != nil {
		return errors.Wrap(_commandTypeErr, "Error serializing 'commandType' field")
	}

	// Switch field (Depending on the discriminator values, passes the serialization to a sub-type)
	_typeSwitchErr := serializeChildFunction()
	if _typeSwitchErr != nil {
		return errors.Wrap(_typeSwitchErr, "Error serializing sub-type field")
	}

	if popErr := io.PopContext("SysexCommand"); popErr != nil {
		return popErr
	}
	return nil
}

// Deprecated: the utils.ReadBufferWriteBased should be used instead
func (m *SysexCommand) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var token xml.Token
	var err error
	foundContent := false
	if start.Attr != nil && len(start.Attr) > 0 {
		switch start.Attr[0].Value {
		// SysexCommandAnalogMappingQueryRequest needs special treatment as it has no fields
		case "org.apache.plc4x.java.firmata.readwrite.SysexCommandAnalogMappingQueryRequest":
			if m.Child == nil {
				m.Child = &SysexCommandAnalogMappingQueryRequest{
					Parent: m,
				}
			}
		// SysexCommandAnalogMappingResponse needs special treatment as it has no fields
		case "org.apache.plc4x.java.firmata.readwrite.SysexCommandAnalogMappingResponse":
			if m.Child == nil {
				m.Child = &SysexCommandAnalogMappingResponse{
					Parent: m,
				}
			}
		// SysexCommandCapabilityQuery needs special treatment as it has no fields
		case "org.apache.plc4x.java.firmata.readwrite.SysexCommandCapabilityQuery":
			if m.Child == nil {
				m.Child = &SysexCommandCapabilityQuery{
					Parent: m,
				}
			}
		// SysexCommandCapabilityResponse needs special treatment as it has no fields
		case "org.apache.plc4x.java.firmata.readwrite.SysexCommandCapabilityResponse":
			if m.Child == nil {
				m.Child = &SysexCommandCapabilityResponse{
					Parent: m,
				}
			}
		// SysexCommandExtendedAnalog needs special treatment as it has no fields
		case "org.apache.plc4x.java.firmata.readwrite.SysexCommandExtendedAnalog":
			if m.Child == nil {
				m.Child = &SysexCommandExtendedAnalog{
					Parent: m,
				}
			}
		// SysexCommandStringData needs special treatment as it has no fields
		case "org.apache.plc4x.java.firmata.readwrite.SysexCommandStringData":
			if m.Child == nil {
				m.Child = &SysexCommandStringData{
					Parent: m,
				}
			}
		// SysexCommandReportFirmwareRequest needs special treatment as it has no fields
		case "org.apache.plc4x.java.firmata.readwrite.SysexCommandReportFirmwareRequest":
			if m.Child == nil {
				m.Child = &SysexCommandReportFirmwareRequest{
					Parent: m,
				}
			}
		// SysexCommandSamplingInterval needs special treatment as it has no fields
		case "org.apache.plc4x.java.firmata.readwrite.SysexCommandSamplingInterval":
			if m.Child == nil {
				m.Child = &SysexCommandSamplingInterval{
					Parent: m,
				}
			}
		// SysexCommandSysexNonRealtime needs special treatment as it has no fields
		case "org.apache.plc4x.java.firmata.readwrite.SysexCommandSysexNonRealtime":
			if m.Child == nil {
				m.Child = &SysexCommandSysexNonRealtime{
					Parent: m,
				}
			}
		// SysexCommandSysexRealtime needs special treatment as it has no fields
		case "org.apache.plc4x.java.firmata.readwrite.SysexCommandSysexRealtime":
			if m.Child == nil {
				m.Child = &SysexCommandSysexRealtime{
					Parent: m,
				}
			}
		}
	}
	for {
		token, err = d.Token()
		if err != nil {
			if err == io.EOF && foundContent {
				return nil
			}
			return err
		}
		switch token.(type) {
		case xml.StartElement:
			foundContent = true
			tok := token.(xml.StartElement)
			switch tok.Name.Local {
			default:
				attr := start.Attr
				if attr == nil || len(attr) <= 0 {
					// TODO: workaround for bug with nested lists
					attr = tok.Attr
				}
				if attr == nil || len(attr) <= 0 {
					panic("Couldn't determine class type for childs of SysexCommand")
				}
				switch attr[0].Value {
				case "org.apache.plc4x.java.firmata.readwrite.SysexCommandExendedId":
					var dt *SysexCommandExendedId
					if m.Child != nil {
						dt = m.Child.(*SysexCommandExendedId)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.firmata.readwrite.SysexCommandAnalogMappingQueryRequest":
					var dt *SysexCommandAnalogMappingQueryRequest
					if m.Child != nil {
						dt = m.Child.(*SysexCommandAnalogMappingQueryRequest)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.firmata.readwrite.SysexCommandAnalogMappingQueryResponse":
					var dt *SysexCommandAnalogMappingQueryResponse
					if m.Child != nil {
						dt = m.Child.(*SysexCommandAnalogMappingQueryResponse)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.firmata.readwrite.SysexCommandAnalogMappingResponse":
					var dt *SysexCommandAnalogMappingResponse
					if m.Child != nil {
						dt = m.Child.(*SysexCommandAnalogMappingResponse)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.firmata.readwrite.SysexCommandCapabilityQuery":
					var dt *SysexCommandCapabilityQuery
					if m.Child != nil {
						dt = m.Child.(*SysexCommandCapabilityQuery)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.firmata.readwrite.SysexCommandCapabilityResponse":
					var dt *SysexCommandCapabilityResponse
					if m.Child != nil {
						dt = m.Child.(*SysexCommandCapabilityResponse)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.firmata.readwrite.SysexCommandPinStateQuery":
					var dt *SysexCommandPinStateQuery
					if m.Child != nil {
						dt = m.Child.(*SysexCommandPinStateQuery)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.firmata.readwrite.SysexCommandPinStateResponse":
					var dt *SysexCommandPinStateResponse
					if m.Child != nil {
						dt = m.Child.(*SysexCommandPinStateResponse)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.firmata.readwrite.SysexCommandExtendedAnalog":
					var dt *SysexCommandExtendedAnalog
					if m.Child != nil {
						dt = m.Child.(*SysexCommandExtendedAnalog)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.firmata.readwrite.SysexCommandStringData":
					var dt *SysexCommandStringData
					if m.Child != nil {
						dt = m.Child.(*SysexCommandStringData)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.firmata.readwrite.SysexCommandReportFirmwareRequest":
					var dt *SysexCommandReportFirmwareRequest
					if m.Child != nil {
						dt = m.Child.(*SysexCommandReportFirmwareRequest)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.firmata.readwrite.SysexCommandReportFirmwareResponse":
					var dt *SysexCommandReportFirmwareResponse
					if m.Child != nil {
						dt = m.Child.(*SysexCommandReportFirmwareResponse)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.firmata.readwrite.SysexCommandSamplingInterval":
					var dt *SysexCommandSamplingInterval
					if m.Child != nil {
						dt = m.Child.(*SysexCommandSamplingInterval)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.firmata.readwrite.SysexCommandSysexNonRealtime":
					var dt *SysexCommandSysexNonRealtime
					if m.Child != nil {
						dt = m.Child.(*SysexCommandSysexNonRealtime)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				case "org.apache.plc4x.java.firmata.readwrite.SysexCommandSysexRealtime":
					var dt *SysexCommandSysexRealtime
					if m.Child != nil {
						dt = m.Child.(*SysexCommandSysexRealtime)
					}
					if err := d.DecodeElement(&dt, &tok); err != nil {
						return err
					}
					if m.Child == nil {
						dt.Parent = m
						m.Child = dt
					}
				}
			}
		}
	}
}

// Deprecated: the utils.WriteBufferReadBased should be used instead
func (m *SysexCommand) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	className := reflect.TypeOf(m.Child).String()
	className = "org.apache.plc4x.java.firmata.readwrite." + className[strings.LastIndex(className, ".")+1:]
	if err := e.EncodeToken(xml.StartElement{Name: start.Name, Attr: []xml.Attr{
		{Name: xml.Name{Local: "className"}, Value: className},
	}}); err != nil {
		return err
	}
	marshaller, ok := m.Child.(xml.Marshaler)
	if !ok {
		return errors.Errorf("child is not castable to Marshaler. Actual type %T", m.Child)
	}
	if err := marshaller.MarshalXML(e, start); err != nil {
		return err
	}
	if err := e.EncodeToken(xml.EndElement{Name: start.Name}); err != nil {
		return err
	}
	return nil
}

func (m SysexCommand) String() string {
	return string(m.Box("", 120))
}

// Deprecated: the utils.WriteBufferBoxBased should be used instead
func (m *SysexCommand) Box(name string, width int) utils.AsciiBox {
	return m.Child.Box(name, width)
}

// Deprecated: the utils.WriteBufferBoxBased should be used instead
func (m *SysexCommand) BoxParent(name string, width int, childBoxer func() []utils.AsciiBox) utils.AsciiBox {
	boxName := "SysexCommand"
	if name != "" {
		boxName += "/" + name
	}
	boxes := make([]utils.AsciiBox, 0)
	// Discriminator Field (commandType) (Used as input to a switch field)
	commandType := uint8(m.Child.CommandType())
	// uint8 can be boxed as anything with the least amount of space
	boxes = append(boxes, utils.BoxAnything("CommandType", commandType, -1))
	// Switch field (Depending on the discriminator values, passes the boxing to a sub-type)
	boxes = append(boxes, childBoxer()...)
	return utils.BoxBox(boxName, utils.AlignBoxes(boxes, width-2), 0)
}
