//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

package model

import (
	"encoding/xml"
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
	"io"
)

// Code generated by build-utils. DO NOT EDIT.

// The data-structure of this message
type FirmataMessageSubscribeDigitalPinValue struct {
	Pin    uint8
	Enable bool
	Parent *FirmataMessage
}

// The corresponding interface
type IFirmataMessageSubscribeDigitalPinValue interface {
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(io utils.WriteBuffer) error
	xml.Marshaler
	xml.Unmarshaler
}

///////////////////////////////////////////////////////////
// Accessors for discriminator values.
///////////////////////////////////////////////////////////
func (m *FirmataMessageSubscribeDigitalPinValue) MessageType() uint8 {
	return 0xD
}

func (m *FirmataMessageSubscribeDigitalPinValue) InitializeParent(parent *FirmataMessage) {
}

func NewFirmataMessageSubscribeDigitalPinValue(pin uint8, enable bool) *FirmataMessage {
	child := &FirmataMessageSubscribeDigitalPinValue{
		Pin:    pin,
		Enable: enable,
		Parent: NewFirmataMessage(),
	}
	child.Parent.Child = child
	return child.Parent
}

func CastFirmataMessageSubscribeDigitalPinValue(structType interface{}) *FirmataMessageSubscribeDigitalPinValue {
	castFunc := func(typ interface{}) *FirmataMessageSubscribeDigitalPinValue {
		if casted, ok := typ.(FirmataMessageSubscribeDigitalPinValue); ok {
			return &casted
		}
		if casted, ok := typ.(*FirmataMessageSubscribeDigitalPinValue); ok {
			return casted
		}
		if casted, ok := typ.(FirmataMessage); ok {
			return CastFirmataMessageSubscribeDigitalPinValue(casted.Child)
		}
		if casted, ok := typ.(*FirmataMessage); ok {
			return CastFirmataMessageSubscribeDigitalPinValue(casted.Child)
		}
		return nil
	}
	return castFunc(structType)
}

func (m *FirmataMessageSubscribeDigitalPinValue) GetTypeName() string {
	return "FirmataMessageSubscribeDigitalPinValue"
}

func (m *FirmataMessageSubscribeDigitalPinValue) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *FirmataMessageSubscribeDigitalPinValue) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.Parent.ParentLengthInBits())

	// Simple field (pin)
	lengthInBits += 4

	// Reserved Field (reserved)
	lengthInBits += 7

	// Simple field (enable)
	lengthInBits += 1

	return lengthInBits
}

func (m *FirmataMessageSubscribeDigitalPinValue) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func FirmataMessageSubscribeDigitalPinValueParse(io utils.ReadBuffer) (*FirmataMessage, error) {
	if pullErr := io.PullContext("FirmataMessageSubscribeDigitalPinValue"); pullErr != nil {
		return nil, pullErr
	}

	// Simple Field (pin)
	pin, _pinErr := io.ReadUint8("pin", 4)
	if _pinErr != nil {
		return nil, errors.Wrap(_pinErr, "Error parsing 'pin' field")
	}

	// Reserved Field (Compartmentalized so the "reserved" variable can't leak)
	{
		reserved, _err := io.ReadUint8("reserved", 7)
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing 'reserved' field")
		}
		if reserved != uint8(0x00) {
			log.Info().Fields(map[string]interface{}{
				"expected value": uint8(0x00),
				"got value":      reserved,
			}).Msg("Got unexpected response.")
		}
	}

	// Simple Field (enable)
	enable, _enableErr := io.ReadBit("enable")
	if _enableErr != nil {
		return nil, errors.Wrap(_enableErr, "Error parsing 'enable' field")
	}

	if closeErr := io.CloseContext("FirmataMessageSubscribeDigitalPinValue"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &FirmataMessageSubscribeDigitalPinValue{
		Pin:    pin,
		Enable: enable,
		Parent: &FirmataMessage{},
	}
	_child.Parent.Child = _child
	return _child.Parent, nil
}

func (m *FirmataMessageSubscribeDigitalPinValue) Serialize(io utils.WriteBuffer) error {
	ser := func() error {
		if pushErr := io.PushContext("FirmataMessageSubscribeDigitalPinValue"); pushErr != nil {
			return pushErr
		}

		// Simple Field (pin)
		pin := uint8(m.Pin)
		_pinErr := io.WriteUint8("pin", 4, (pin))
		if _pinErr != nil {
			return errors.Wrap(_pinErr, "Error serializing 'pin' field")
		}

		// Reserved Field (reserved)
		{
			_err := io.WriteUint8("reserved", 7, uint8(0x00))
			if _err != nil {
				return errors.Wrap(_err, "Error serializing 'reserved' field")
			}
		}

		// Simple Field (enable)
		enable := bool(m.Enable)
		_enableErr := io.WriteBit("enable", (enable))
		if _enableErr != nil {
			return errors.Wrap(_enableErr, "Error serializing 'enable' field")
		}

		if popErr := io.PopContext("FirmataMessageSubscribeDigitalPinValue"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.Parent.SerializeParent(io, m, ser)
}

// Deprecated: the utils.ReadBufferWriteBased should be used instead
func (m *FirmataMessageSubscribeDigitalPinValue) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var token xml.Token
	var err error
	foundContent := false
	token = start
	for {
		switch token.(type) {
		case xml.StartElement:
			foundContent = true
			tok := token.(xml.StartElement)
			switch tok.Name.Local {
			case "pin":
				var data uint8
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.Pin = data
			case "enable":
				var data bool
				if err := d.DecodeElement(&data, &tok); err != nil {
					return err
				}
				m.Enable = data
			}
		}
		token, err = d.Token()
		if err != nil {
			if err == io.EOF && foundContent {
				return nil
			}
			return err
		}
	}
}

// Deprecated: the utils.WriteBufferReadBased should be used instead
func (m *FirmataMessageSubscribeDigitalPinValue) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if err := e.EncodeElement(m.Pin, xml.StartElement{Name: xml.Name{Local: "pin"}}); err != nil {
		return err
	}
	if err := e.EncodeElement(m.Enable, xml.StartElement{Name: xml.Name{Local: "enable"}}); err != nil {
		return err
	}
	return nil
}

func (m FirmataMessageSubscribeDigitalPinValue) String() string {
	return string(m.Box("", 120))
}

// Deprecated: the utils.WriteBufferBoxBased should be used instead
func (m FirmataMessageSubscribeDigitalPinValue) Box(name string, width int) utils.AsciiBox {
	boxName := "FirmataMessageSubscribeDigitalPinValue"
	if name != "" {
		boxName += "/" + name
	}
	childBoxer := func() []utils.AsciiBox {
		boxes := make([]utils.AsciiBox, 0)
		// Simple field (case simple)
		// uint8 can be boxed as anything with the least amount of space
		boxes = append(boxes, utils.BoxAnything("Pin", m.Pin, -1))
		// Reserved Field (reserved)
		// reserved field can be boxed as anything with the least amount of space
		boxes = append(boxes, utils.BoxAnything("reserved", uint8(0x00), -1))
		// Simple field (case simple)
		// bool can be boxed as anything with the least amount of space
		boxes = append(boxes, utils.BoxAnything("Enable", m.Enable, -1))
		return boxes
	}
	return m.Parent.BoxParent(boxName, width, childBoxer)
}
